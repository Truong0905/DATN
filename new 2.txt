            LinkList *p, *pNEXT, *pNEXT1, *pPREV, *pPREV1;
    FILE *pFile;
    char *OUT;
    int check = 0; // Kiểm tra xem hết 1 network chưa
    char *insert_str_pre = "(";
    char *insert_str_next = ")";
    char *insert_str_mul = "*";
    char *insert_str_add = "+";
    int left = 0 ;
    int right = 0 ;

    pFile = fopen("PLC_F.txt", "w");
    p = First_F;
    while (p != NULL)
    {
		if (check == 0) // Chưa kết thúc 1 network
        {
            OUT="";
            check = 1;
        }
        if (strcmp(p->data, "N") == 0)
        {
            check = 0;
            p = p->next;
            continue;
        }

        /////////////////////////////////////////////////////////////////////////

        if (strncmp(p->data, "(", 1) == 0)
        {
                left ++ ;
            OUT = str_alloc_and_insert(OUT,insert_str_pre );
        }
        else if  (strncmp(p->data, ")", 1) == 0)
        {
            right ++ ;
            OUT = str_alloc_and_insert(OUT, insert_str_next);
        }
        else if ((strcmp(p->data, "LD") == 0) || (strcmp(p->data, "LDN") == 0))
        {
            pNEXT = p->next;
            OUT = str_alloc_and_insert(OUT, pNEXT->data);
            p = p->next ;
        }
        else if ((strcmp(p->data, "EU") == 0) || (strcmp(p->data, "ED") == 0))
        {
            p = p->next;
            continue;
        }
        else if ((strcmp(p->data, "A") == 0) || (strcmp(p->data, "AN") == 0))
        {
 
            char *search = strstr(OUT, ")(");
            if (search != NULL)
            {  
                size_t size_of_search = strlen(search);
                size_t size_of_OUT = strlen(OUT);
                size_t insert_p = size_of_OUT - size_of_search +1;
                OUT = str_alloc_and_insert_every(OUT, insert_p, insert_str_pre);
                left ++ ;
                p = p->next ;
               OUT = str_alloc_and_insert(OUT, insert_str_mul);
                OUT = str_alloc_and_insert(OUT, p->data);
                OUT = str_alloc_and_insert(OUT, insert_str_next);
                right ++ ;
            }
            else
            {
                pNEXT = p->next;
                OUT = str_alloc_and_insert(insert_str_pre, OUT);
                left ++ ;
                OUT = str_alloc_and_insert(OUT, insert_str_mul);
                OUT = str_alloc_and_insert(OUT, pNEXT->data);
                 OUT = str_alloc_and_insert(OUT,insert_str_next);
                 right ++ ;
                p = p->next ;
            }
        }
        else if ((strcmp(p->data, "O") == 0) || (strcmp(p->data, "ON") == 0))
        {   
            char *search = strstr(OUT, ")(");
            if (search != NULL)
            {  
                size_t size_of_search = strlen(search);
                size_t size_of_OUT = strlen(OUT);
                size_t insert_p = size_of_OUT - size_of_search +1;
                OUT = str_alloc_and_insert_every(OUT, insert_p, insert_str_pre);
                left ++ ;
                p = p->next ;
               OUT = str_alloc_and_insert(OUT, insert_str_add);
                OUT = str_alloc_and_insert(OUT, p->data);
                OUT = str_alloc_and_insert(OUT, insert_str_next);
                right ++ ;

            }
            else
            {
                pNEXT = p->next;
                OUT = str_alloc_and_insert(insert_str_pre, OUT);
                left ++ ;
                OUT = str_alloc_and_insert(OUT, insert_str_add);
                OUT = str_alloc_and_insert(OUT, pNEXT->data);
                 OUT = str_alloc_and_insert(OUT,insert_str_next);
                 right ++ ;
                p = p->next ;
            }
 
        }
        else if (strcmp(p->data, "NOT") == 0)
        {
            char *arr1 = "!(";
            OUT = str_alloc_and_insert(arr1, OUT);
            char *arr2 = ")";
            OUT = str_alloc_and_insert(OUT, arr2);
        }
        else if (strcmp(p->data, "ALD") == 0)
        {
            char *search = strstr(OUT, ")(");
            size_t size_of_search = strlen(search);
            size_t size_of_OUT = strlen(OUT);
            size_t insert_p = size_of_OUT - size_of_search +1;
            OUT = str_alloc_and_insert_every(OUT, insert_p, insert_str_mul);
        }
        else if (strcmp(p->data, "OLD") == 0)
        {
            char *search = strstr(OUT, ")(");
            size_t size_of_search = strlen(search);
            size_t size_of_OUT = strlen(OUT);
            size_t insert_p = size_of_OUT - size_of_search +1;
            OUT = str_alloc_and_insert_every(OUT, insert_p, insert_str_add);
        }
        else if (strcmp(p->data, "=") == 0) // q0.1=(A*B)\n
        {
            char *arr3 = ";\n";
            OUT = str_alloc_and_insert(OUT, arr3);
            OUT = str_alloc_and_insert(p->data, OUT);
            p = p->next;
            OUT = str_alloc_and_insert(p->data, OUT);
            fputs(OUT, pFile);
        }
        p = p->next ; 
    }
    fclose( pFile);